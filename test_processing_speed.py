#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å + —Å–∫–æ—Ä–æ—Å—Ç—å)
"""

import os
import sys
import time
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.pipeline.core import DEFAULT_BATCH_SIZE
from src.pipeline.adapter import DEFAULT_BATCH_SIZE as ADAPTER_BATCH_SIZE

def test_balanced_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    print("=" * 55)
    
    print(f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   core.py DEFAULT_BATCH_SIZE: {DEFAULT_BATCH_SIZE}")
    print(f"   adapter.py DEFAULT_BATCH_SIZE: {ADAPTER_BATCH_SIZE}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    if DEFAULT_BATCH_SIZE == ADAPTER_BATCH_SIZE:
        print(f"‚úÖ –†–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {DEFAULT_BATCH_SIZE}")
    else:
        print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–µ–π –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
    
    print()
    print("üéØ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print("‚úÖ Batch size —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 5 (–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
    print("‚úÖ URL –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–¥–µ—Ä–∂–∫–∞ 0.2—Å (–∫–æ–º–ø—Ä–æ–º–∏—Å—Å)")
    print("‚úÖ ScrapingBee: –∑–∞–¥–µ—Ä–∂–∫–∞ 1.5—Å –ø—Ä–∏ concurrency limit")
    print("‚úÖ –ú–∞–∫—Å–∏–º—É–º 7 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–π URL")
    print()
    print("‚öñÔ∏è  –ë–∞–ª–∞–Ω—Å: –°–∫–æ—Ä–æ—Å—Ç—å VS –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å API")
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    url_validation_time = 0.2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–∞–ª–∏–¥–∞—Ü–∏—è–º–∏
    max_concurrent_validations = 7
    
    test_cases = [
        {"companies": 3, "urls_to_validate": 3},
        {"companies": 5, "urls_to_validate": 5}, 
        {"companies": 10, "urls_to_validate": 10}
    ]
    
    print("üèÅ –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ):")
    print(f"{'–ö–æ–º–ø–∞–Ω–∏–π':<10} {'URL –≤–∞–ª–∏–¥–∞—Ü–∏—è':<15} {'–û–±—Ä–∞–±–æ—Ç–∫–∞':<15} {'–ò—Ç–æ–≥–æ':<10}")
    print("-" * 55)
    
    for case in test_cases:
        urls = case["urls_to_validate"] 
        companies = case["companies"]
        
        # –í—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL (—Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏)
        validation_batches = (urls + max_concurrent_validations - 1) // max_concurrent_validations
        url_time = validation_batches * url_validation_time
        
        # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π (—Å —É—á–µ—Ç–æ–º batch size)
        processing_batches = (companies + DEFAULT_BATCH_SIZE - 1) // DEFAULT_BATCH_SIZE  
        processing_time = processing_batches * 60  # ~60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –±–∞—Ç—á
        
        total_time = url_time + processing_time
        
        print(f"{companies:<10} {url_time:.1f}—Å{'':<10} {processing_time/60:.1f}–º–∏–Ω{'':<8} {total_time/60:.1f}–º–∏–Ω")
    
    return True

async def simulate_realistic_processing():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ API"""
    
    async def validate_url(url_id: int):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é URL —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        print(f"  üîó –í–∞–ª–∏–¥–∞—Ü–∏—è URL {url_id}")
        await asyncio.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        print(f"  ‚úÖ URL {url_id} –≤–∞–ª–∏–¥–µ–Ω")
        return f"url_{url_id}_validated"
    
    async def process_company(company_id: int):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–ø–∞–Ω–∏–∏"""
        print(f"  üè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")
        await asyncio.sleep(12)  # ~12 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é –≤ –±–∞—Ç—á–µ
        print(f"  ‚úÖ –ö–æ–º–ø–∞–Ω–∏—è {company_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return {"company_id": company_id, "status": "success"}
    
    async def run_realistic_simulation():
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é"""
        print(f"\nüöÄ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è (5 –∫–æ–º–ø–∞–Ω–∏–π, batch={DEFAULT_BATCH_SIZE})")
        
        start_time = time.time()
        
        # –≠—Ç–∞–ø 1: –í–∞–ª–∏–¥–∞—Ü–∏—è URL (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, max 7)
        print("\nüìã –≠—Ç–∞–ø 1: –í–∞–ª–∏–¥–∞—Ü–∏—è URL")
        url_semaphore = asyncio.Semaphore(7)
        
        async def validate_with_semaphore(url_id):
            async with url_semaphore:
                return await validate_url(url_id)
        
        url_tasks = [asyncio.create_task(validate_with_semaphore(i)) for i in range(1, 6)]
        await asyncio.gather(*url_tasks)
        
        validation_time = time.time() - start_time
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {validation_time:.1f}—Å")
        
        # –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, batch=5)
        print("\nüè≠ –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π")
        company_semaphore = asyncio.Semaphore(DEFAULT_BATCH_SIZE)
        
        async def process_with_semaphore(company_id):
            async with company_semaphore:
                return await process_company(company_id)
        
        company_tasks = [asyncio.create_task(process_with_semaphore(i)) for i in range(1, 6)]
        await asyncio.gather(*company_tasks)
        
        total_time = time.time() - start_time
        processing_time = total_time - validation_time
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è URL: {validation_time:.1f}—Å")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π: {processing_time:.1f}—Å")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å")
        print(f"   –í—Ä–µ–º—è –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é: {total_time/5:.1f}—Å")
    
    try:
        await run_realistic_simulation()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üîç –¢–µ—Å—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 65)
    
    success = True
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        success &= test_balanced_configuration()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        success = False
    
    # –¢–µ—Å—Ç 2: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
    try:
        success &= await simulate_realistic_processing()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        success = False
    
    print("\nüèÅ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
    if success:
        print("‚úÖ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
        print("‚úÖ –ö–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é API")
        print("‚öñÔ∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞, –Ω–æ API –∑–∞—â–∏—â–µ–Ω—ã")
        print("üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ rate limiting")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
    
    return success

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 