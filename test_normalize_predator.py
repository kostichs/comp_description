#!/usr/bin/env python3
"""
–¢–µ—Å—Ç normalize_and_remove_duplicates —Å predator –∫–æ–ª–æ–Ω–∫–æ–π
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

from normalize_urls import normalize_and_remove_duplicates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

async def test_normalize_with_predator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º normalize_and_remove_duplicates —Å predator"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å predator –∫–æ–ª–æ–Ω–∫–æ–π
    test_data = """Company_Name,Official_Website,predator
Wargaming Group Limited,wargaming.com,383
Test Company 2,example.com,999"""
    
    test_file = "test_input_with_predator.csv"
    output_file = "test_output_with_predator.csv"
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open(test_file, 'w') as f:
        f.write(test_data)
    
    logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º normalize_and_remove_duplicates —Å predator –∫–æ–ª–æ–Ω–∫–æ–π")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º normalize_and_remove_duplicates
        result_file, details = await normalize_and_remove_duplicates(
            test_file, 
            output_file,
            session_id_for_metadata=None
        )
        
        if result_file:
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞: {result_file}")
            logger.info(f"   –î–µ—Ç–∞–ª–∏: {details}")
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(result_file, 'r') as f:
                result_content = f.read()
            
            logger.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            logger.info(result_content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ predator –∫–æ–ª–æ–Ω–∫–∞
            if 'predator' in result_content:
                logger.info("‚úÖ PREDATOR –∫–æ–ª–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 383
                if '383' in result_content:
                    logger.info("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ predator=383 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
                else:
                    logger.error("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ predator=383 –ø–æ—Ç–µ—Ä—è–Ω–æ!")
            else:
                logger.error("‚ùå PREDATOR –∫–æ–ª–æ–Ω–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞!")
                
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {details}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        for f in [test_file, output_file]:
            if os.path.exists(f):
                os.remove(f)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {f}")

if __name__ == "__main__":
    asyncio.run(test_normalize_with_predator()) 