"""
Global Circuit Breaker –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è OpenAI API –∑–∞–ø—Ä–æ—Å–∞–º–∏
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç cascade failures –ø—Ä–∏ rate limiting
"""

import time
import threading
from enum import Enum
from typing import Optional, List
from src.utils.logging import log_info, log_error, log_debug


class CircuitState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker"""
    CLOSED = "CLOSED"       # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "OPEN"          # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    HALF_OPEN = "HALF_OPEN" # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è


class CircuitOpenException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ Circuit Breaker –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"""
    def __init__(self, message: str, retry_after: Optional[float] = None):
        super().__init__(message)
        self.retry_after = retry_after


class OpenAICircuitBreaker:
    """
    Thread-safe Circuit Breaker –¥–ª—è OpenAI API
    
    –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
    - CLOSED: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, —Å—á–∏—Ç–∞–µ—Ç –æ—à–∏–±–∫–∏
    - OPEN: –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ timeout –ø–µ—Ä–∏–æ–¥  
    - HALF_OPEN: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    
    def __init__(self, 
                 failure_threshold: int = 5,
                 recovery_timeout: int = 120,
                 success_threshold: int = 3,
                 rate_limit_keywords: List[str] = None):
        """
        Args:
            failure_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ OPEN
            recovery_timeout: –°–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –≤ OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            success_threshold: –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏–∑ HALF_OPEN
            rate_limit_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ rate limit –æ—à–∏–±–æ–∫
        """
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.success_threshold = success_threshold
        self.rate_limit_keywords = rate_limit_keywords or [
            'rate_limit', 'quota_exceeded', 'too_many_requests', 
            'rate limit', 'limit exceeded', 'throttled'
        ]
        
        # Thread-safe —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._lock = threading.RLock()
        self._state = CircuitState.CLOSED
        self._failure_count = 0
        self._success_count = 0
        self._last_failure_time = None
        self._half_open_requests = 0
        self._max_half_open_requests = 3
        
        log_info(f"üõ°Ô∏è Circuit Breaker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: threshold={failure_threshold}, timeout={recovery_timeout}s")
    
    def can_execute(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        
        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        """
        with self._lock:
            if self._state == CircuitState.CLOSED:
                return True
                
            elif self._state == CircuitState.OPEN:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                if self._should_attempt_reset():
                    self._transition_to_half_open()
                    return True
                return False
                
            elif self._state == CircuitState.HALF_OPEN:
                # –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                if self._half_open_requests < self._max_half_open_requests:
                    self._half_open_requests += 1
                    return True
                return False
                
        return False
    
    def record_success(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        with self._lock:
            if self._state == CircuitState.CLOSED:
                # –í –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                if self._failure_count > 0:
                    self._failure_count = 0
                    log_debug("üõ°Ô∏è Failure count reset after success")
                    
            elif self._state == CircuitState.HALF_OPEN:
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–∏
                self._success_count += 1
                log_debug(f"üõ°Ô∏è Half-open success: {self._success_count}/{self.success_threshold}")
                
                if self._success_count >= self.success_threshold:
                    self._transition_to_closed()
    
    def record_failure(self, error: Exception) -> bool:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ rate limit –æ—à–∏–±–∫–∞, False –∏–Ω–∞—á–µ
        """
        error_str = str(error).lower()
        is_rate_limit = any(keyword in error_str for keyword in self.rate_limit_keywords)
        
        if not is_rate_limit:
            # –ù–µ rate limit –æ—à–∏–±–∫–∞ - –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ circuit breaker
            return False
            
        with self._lock:
            self._failure_count += 1
            self._last_failure_time = time.time()
            
            log_debug(f"üõ°Ô∏è Rate limit failure recorded: {self._failure_count}/{self.failure_threshold}")
            
            if self._state == CircuitState.CLOSED:
                if self._failure_count >= self.failure_threshold:
                    self._transition_to_open()
                    
            elif self._state == CircuitState.HALF_OPEN:
                # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ OPEN
                self._transition_to_open()
                
        return True
    
    def get_state_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ circuit breaker"""
        with self._lock:
            return {
                "state": self._state.value,
                "failure_count": self._failure_count,
                "success_count": self._success_count,
                "last_failure_time": self._last_failure_time,
                "time_until_retry": self._get_time_until_retry(),
                "half_open_requests": self._half_open_requests if self._state == CircuitState.HALF_OPEN else 0
            }
    
    def force_open(self, reason: str = "Manual"):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å circuit breaker"""
        with self._lock:
            log_info(f"üõ°Ô∏è Circuit Breaker –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç: {reason}")
            self._transition_to_open()
    
    def force_close(self, reason: str = "Manual"):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å circuit breaker"""
        with self._lock:
            log_info(f"üõ°Ô∏è Circuit Breaker –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç: {reason}")
            self._transition_to_closed()
    
    def _should_attempt_reset(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä–∞ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self._last_failure_time is None:
            return True
        return time.time() - self._last_failure_time >= self.recovery_timeout
    
    def _get_time_until_retry(self) -> Optional[float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏"""
        if self._state != CircuitState.OPEN or self._last_failure_time is None:
            return None
        elapsed = time.time() - self._last_failure_time
        remaining = self.recovery_timeout - elapsed
        return max(0, remaining)
    
    def _transition_to_open(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OPEN"""
        if self._state != CircuitState.OPEN:
            self._state = CircuitState.OPEN
            self._success_count = 0
            self._half_open_requests = 0
            retry_time = self._get_time_until_retry()
            log_error(f"üî¥ Circuit Breaker –û–¢–ö–†–´–¢ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ OpenAI –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ {self.recovery_timeout}s")
            log_info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    def _transition_to_half_open(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN"""
        if self._state != CircuitState.HALF_OPEN:
            self._state = CircuitState.HALF_OPEN
            self._success_count = 0
            self._half_open_requests = 0
            log_info(f"üü° Circuit Breaker –ü–û–õ–£–û–¢–ö–†–´–¢ - —Ç–µ—Å—Ç–∏—Ä—É–µ–º {self._max_half_open_requests} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    def _transition_to_closed(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CLOSED"""
        if self._state != CircuitState.CLOSED:
            self._state = CircuitState.CLOSED
            self._failure_count = 0
            self._success_count = 0
            self._half_open_requests = 0
            self._last_failure_time = None
            log_info(f"üü¢ Circuit Breaker –ó–ê–ö–†–´–¢ - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å circuit breaker
_global_circuit_breaker: Optional[OpenAICircuitBreaker] = None
_breaker_lock = threading.Lock()


def get_circuit_breaker() -> OpenAICircuitBreaker:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å circuit breaker (thread-safe singleton)"""
    global _global_circuit_breaker
    
    if _global_circuit_breaker is None:
        with _breaker_lock:
            if _global_circuit_breaker is None:
                from src.utils.config import CIRCUIT_BREAKER_CONFIG
                _global_circuit_breaker = OpenAICircuitBreaker(
                    failure_threshold=CIRCUIT_BREAKER_CONFIG['failure_threshold'],
                    recovery_timeout=CIRCUIT_BREAKER_CONFIG['recovery_timeout'],
                    success_threshold=CIRCUIT_BREAKER_CONFIG['success_threshold'],
                    rate_limit_keywords=CIRCUIT_BREAKER_CONFIG['rate_limit_keywords']
                )
    
    return _global_circuit_breaker


def reset_circuit_breaker():
    """–°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ circuit breaker (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    global _global_circuit_breaker
    with _breaker_lock:
        _global_circuit_breaker = None 