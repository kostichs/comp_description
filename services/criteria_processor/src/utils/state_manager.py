"""
State Manager –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ —Å–±–æ–µ–≤ –∏–ª–∏ –ø–∞—É–∑
"""

import json
import os
import time
import threading
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from src.utils.logging import log_info, log_error, log_debug


class ProcessingStateManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç:
    - –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–ø—Ä–æ–¥—É–∫—Ç, –∫–æ–º–ø–∞–Ω–∏—è, –∞—É–¥–∏—Ç–æ—Ä–∏—è)
    - –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
    """
    
    def __init__(self, session_id: str, base_output_dir: str = None):
        """
        Args:
            session_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
            base_output_dir: –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è output (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config)
        """
        self.session_id = session_id
        self._lock = threading.RLock()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫–∏
        if base_output_dir is None:
            from src.utils.config import OUTPUT_DIR
            base_output_dir = OUTPUT_DIR
            
        self.session_dir = Path(base_output_dir) / session_id
        self.session_dir.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.progress_file = self.session_dir / f"{session_id}_progress.json"
        self.results_file = self.session_dir / f"{session_id}_partial_results.json"
        self.metadata_file = self.session_dir / f"{session_id}_metadata.json"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self._current_state = {
            "session_id": session_id,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "status": "created",
            "current_product_index": 0,
            "current_company_index": 0,
            "current_product": None,
            "current_company": None,
            "current_audience": None,
            "current_stage": "initialization",
            "total_products": 0,
            "total_companies": 0,
            "processed_companies": 0,
            "failed_companies": 0,
            "circuit_breaker_events": [],
            "last_circuit_breaker_event": None
        }
        
        self._partial_results = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        self._load_existing_state()
        
        log_info(f"üíæ State Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏: {session_id}")
        log_info(f"üìÅ –ü–∞–ø–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {self.session_dir}")
    
    def save_progress(self, 
                     product_index: int, 
                     company_index: int, 
                     product_name: str = None,
                     company_name: str = None,
                     audience: str = None, 
                     stage: str = "processing") -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        
        Args:
            product_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            company_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏  
            product_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            audience: –¢–µ–∫—É—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
            stage: –°—Ç–∞–¥–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with self._lock:
                self._current_state.update({
                    "updated_at": datetime.now().isoformat(),
                    "current_product_index": product_index,
                    "current_company_index": company_index,
                    "current_product": product_name,
                    "current_company": company_name,
                    "current_audience": audience,
                    "current_stage": stage,
                    "status": "processing"
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                with open(self.progress_file, 'w', encoding='utf-8') as f:
                    json.dump(self._current_state, f, ensure_ascii=False, indent=2)
                
                log_debug(f"üíæ Progress saved: P{product_index} C{company_index} {stage}")
                return True
                
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return False
    
    def load_progress(self) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        try:
            if self.progress_file.exists():
                with open(self.progress_file, 'r', encoding='utf-8') as f:
                    progress = json.load(f)
                
                log_info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress.get('current_stage', 'unknown')}")
                log_info(f"   –ü—Ä–æ–¥—É–∫—Ç: {progress.get('current_product_index', 0)}/{progress.get('total_products', 0)}")
                log_info(f"   –ö–æ–º–ø–∞–Ω–∏—è: {progress.get('current_company_index', 0)}/{progress.get('total_companies', 0)}")
                
                return progress
            
            return None
            
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return None
    
    def save_partial_results(self, results: List[Dict[str, Any]]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            with self._lock:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                self._partial_results.extend(results)
                
                # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    "session_id": self.session_id,
                    "saved_at": datetime.now().isoformat(),
                    "total_results": len(self._partial_results),
                    "batch_size": len(results),
                    "progress": self._current_state.copy()
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                with open(self.results_file, 'w', encoding='utf-8') as f:
                    json.dump(self._partial_results, f, ensure_ascii=False, indent=2)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                with open(self.metadata_file, 'w', encoding='utf-8') as f:
                    json.dump(metadata, f, ensure_ascii=False, indent=2)
                
                log_info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤—Å–µ–≥–æ: {len(self._partial_results)})")
                return True
                
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False
    
    def load_partial_results(self) -> List[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        try:
            if self.results_file.exists():
                with open(self.results_file, 'r', encoding='utf-8') as f:
                    results = json.load(f)
                
                log_info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(results)} –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return results
            
            return []
            
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return []
    
    def record_circuit_breaker_event(self, event_type: str, details: Dict[str, Any] = None):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ circuit breaker
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (opened, closed, half_open)
            details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        """
        try:
            with self._lock:
                event = {
                    "timestamp": datetime.now().isoformat(),
                    "type": event_type,
                    "details": details or {}
                }
                
                self._current_state["circuit_breaker_events"].append(event)
                self._current_state["last_circuit_breaker_event"] = event
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π
                if len(self._current_state["circuit_breaker_events"]) > 50:
                    self._current_state["circuit_breaker_events"] = \
                        self._current_state["circuit_breaker_events"][-50:]
                
                log_debug(f"üõ°Ô∏è Circuit breaker event recorded: {event_type}")
                
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è circuit breaker: {e}")
    
    def mark_company_completed(self, company_name: str, product: str, success: bool = True):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
        
        Args:
            company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            product: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞  
            success: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        """
        try:
            with self._lock:
                if success:
                    self._current_state["processed_companies"] += 1
                else:
                    self._current_state["failed_companies"] += 1
                
                log_debug(f"‚úÖ Company marked completed: {company_name} ({product})")
                
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
    
    def update_totals(self, total_products: int, total_companies: int):
        """
        –û–±–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
        
        Args:
            total_products: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            total_companies: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π
        """
        try:
            with self._lock:
                self._current_state.update({
                    "total_products": total_products,
                    "total_companies": total_companies
                })
                
                log_debug(f"üìä Totals updated: {total_products} products, {total_companies} companies")
                
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤: {e}")
    
    def mark_completed(self, status: str = "completed"):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        
        Args:
            status: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (completed, failed, cancelled)
        """
        try:
            with self._lock:
                self._current_state.update({
                    "status": status,
                    "completed_at": datetime.now().isoformat(),
                    "updated_at": datetime.now().isoformat()
                })
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                with open(self.progress_file, 'w', encoding='utf-8') as f:
                    json.dump(self._current_state, f, ensure_ascii=False, indent=2)
                
                log_info(f"üèÅ –°–µ—Å—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è: {status}")
                
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
    
    def clear_progress(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        try:
            files_to_remove = [self.progress_file, self.results_file, self.metadata_file]
            
            for file_path in files_to_remove:
                if file_path.exists():
                    file_path.unlink()
                    log_debug(f"üóëÔ∏è Removed: {file_path.name}")
            
            log_info("üßπ Progress cleared")
            
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def get_state_summary(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        """
        try:
            with self._lock:
                return {
                    "session_id": self.session_id,
                    "status": self._current_state.get("status", "unknown"),
                    "progress": {
                        "products": f"{self._current_state.get('current_product_index', 0)}/{self._current_state.get('total_products', 0)}",
                        "companies": f"{self._current_state.get('current_company_index', 0)}/{self._current_state.get('total_companies', 0)}",
                        "processed": self._current_state.get("processed_companies", 0),
                        "failed": self._current_state.get("failed_companies", 0)
                    },
                    "current": {
                        "product": self._current_state.get("current_product"),
                        "company": self._current_state.get("current_company"),
                        "audience": self._current_state.get("current_audience"),
                        "stage": self._current_state.get("current_stage")
                    },
                    "results_count": len(self._partial_results),
                    "circuit_breaker_events": len(self._current_state.get("circuit_breaker_events", [])),
                    "last_updated": self._current_state.get("updated_at")
                }
                
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {"error": str(e)}
    
    def can_resume(self) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
        
        Returns:
            (True/False, –ø—Ä–∏—á–∏–Ω–∞)
        """
        try:
            progress = self.load_progress()
            if not progress:
                return False, "No saved progress found"
            
            status = progress.get("status", "unknown")
            if status in ["completed", "cancelled"]:
                return False, f"Session already {status}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if progress.get("total_products", 0) == 0:
                return False, "Invalid progress data (no products)"
            
            current_product_index = progress.get("current_product_index", 0)
            total_products = progress.get("total_products", 0)
            
            if current_product_index >= total_products:
                return False, "All products already processed"
            
            return True, "Can resume from saved progress"
            
        except Exception as e:
            return False, f"Error checking resume capability: {e}"
    
    def _load_existing_state(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if self.progress_file.exists():
                with open(self.progress_file, 'r', encoding='utf-8') as f:
                    saved_state = json.load(f)
                    self._current_state.update(saved_state)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if self.results_file.exists():
                self._partial_results = self.load_partial_results()
            
            log_debug(f"üíæ Existing state loaded: {self._current_state.get('status', 'new')}")
            
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}") 