#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–æ–º–ø–∞–Ω–∏–π - –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import sys
import os
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.utils.config import validate_config
from src.utils.logging import setup_logging, log_info, log_error
from src.core.processor import run_analysis, run_analysis_optimized, run_analysis_super_optimized
from src.core.parallel_processor import run_parallel_analysis
from src.core.recovery import resume_processing, get_resumable_sessions

def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–æ–º–ø–∞–Ω–∏–π')
    
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '--file', '-f',
        type=str,
        help='–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ñ–∞–π–ª—É –∫–æ–º–ø–∞–Ω–∏–π (CSV/Excel): data/companies.csv –∏–ª–∏ data/companies.xlsx'
    )
    group.add_argument(
        '--all-files', '-a',
        action='store_true',
        help='–ó–∞–≥—Ä—É–∑–∏—Ç—å –í–°–ï CSV/Excel —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ data/'
    )
    
    parser.add_argument(
        '--session-id', '-s',
        type=str,
        help='ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
    )

    parser.add_argument(
        '--deep-analysis',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ScrapingBee'
    )

    parser.add_argument(
        '--parallel',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–ø–∞–Ω–∏–π (–±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ API)'
    )
    
    parser.add_argument(
        '--optimized',
        action='store_true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: –∫–æ–º–ø–∞–Ω–∏—è –∑–∞ –∫–æ–º–ø–∞–Ω–∏–µ–π —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é'
    )
    
    parser.add_argument(
        '--super-optimized',
        action='store_true',
        help='–°–£–ü–ï–†-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏–π + –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)'
    )

    parser.add_argument(
        '--max-concurrent',
        type=int,
        default=12,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Å --parallel)'
    )
    
    # Circuit Breaker and Recovery arguments
    parser.add_argument(
        '--resume-session',
        type=str,
        help='–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Ä–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: crit_20241201_143022)'
    )
    
    parser.add_argument(
        '--list-resumable',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å'
    )
    
    parser.add_argument(
        '--disable-circuit-breaker',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å Circuit Breaker (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'
    )
    
    parser.add_argument(
        '--selected-products',
        type=str,
        help='Comma-separated list of selected products to analyze (e.g., "Product 1,Product 2")'
    )
    
    parser.add_argument(
        '--write-to-hubspot-criteria',
        action='store_true',
        help='–ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤ HubSpot (–≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'
    )
    
    return parser.parse_args()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        args = parse_arguments()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        
        log_info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–æ–º–ø–∞–Ω–∏–π v2.0")
        log_info("–ù–æ–≤–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å Circuit Breaker –∏ State Management")
        
        # Handle list resumable sessions command
        if args.list_resumable:
            log_info("üìã –ü–æ–∏—Å–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö —Å–µ—Å—Å–∏–π...")
            resumable_sessions = get_resumable_sessions()
            
            if not resumable_sessions:
                log_info("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return
            
            log_info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(resumable_sessions)} —Å–µ—Å—Å–∏–π:")
            for session in resumable_sessions:
                if session.get('can_resume', False):
                    log_info(f"  ‚úÖ {session['session_id']} - {session.get('status', 'unknown')}")
                    log_info(f"     –ü—Ä–æ–≥—Ä–µ—Å—Å: {session.get('progress', {})}")
                    log_info(f"     –û–±–Ω–æ–≤–ª–µ–Ω–æ: {session.get('last_updated', 'unknown')}")
                else:
                    log_info(f"  ‚ùå {session['session_id']} - {session.get('resume_reason', 'cannot resume')}")
            
            log_info("üí° –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --resume-session SESSION_ID")
            return
        
        # Handle resume session command
        if args.resume_session:
            log_info(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {args.resume_session}")
            
            # Disable circuit breaker if requested
            if args.disable_circuit_breaker:
                log_info("‚ö†Ô∏è Circuit Breaker –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
                from src.utils.config import CIRCUIT_BREAKER_CONFIG
                CIRCUIT_BREAKER_CONFIG['enable_circuit_breaker'] = False
            
            success, message, results = resume_processing(
                session_id=args.resume_session,
                companies_file=args.file,
                load_all_companies=args.all_files,
                use_deep_analysis=args.deep_analysis,
                max_concurrent_companies=args.max_concurrent
            )
            
            if success:
                log_info(f"üéâ {message}")
                log_info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results) if results else 0}")
            else:
                log_error(f"‚ùå {message}")
                sys.exit(1)
            
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if args.all_files:
            log_info("–†–ï–ñ–ò–ú: –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ data/")
        elif args.file:
            log_info(f"–†–ï–ñ–ò–ú: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {args.file}")
        else:
            log_info("–†–ï–ñ–ò–ú: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # Disable circuit breaker if requested
        if args.disable_circuit_breaker:
            log_info("‚ö†Ô∏è Circuit Breaker –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            from src.utils.config import CIRCUIT_BREAKER_CONFIG
            CIRCUIT_BREAKER_CONFIG['enable_circuit_breaker'] = False
        
        # Parse selected products
        selected_products_list = None
        if args.selected_products:
            selected_products_list = [p.strip() for p in args.selected_products.split(',') if p.strip()]
            log_info(f"üéØ –ë—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {selected_products_list}")
        
        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï HUBSPOT –ü–ê–†–ê–ú–ï–¢–†–ê
        log_info(f"üîç HUBSPOT –ü–ê–†–ê–ú–ï–¢–† –í MAIN.PY:")
        log_info(f"   üîó args.write_to_hubspot_criteria = {args.write_to_hubspot_criteria}")
        log_info(f"   üìù –¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {type(args.write_to_hubspot_criteria)}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        log_info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        validate_config()
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        log_info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        
        if args.super_optimized:
            log_info(f"üî• –°–£–ü–ï–†-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –†–ï–ñ–ò–ú: {args.max_concurrent} –∫–æ–º–ø–∞–Ω–∏–π + –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å")
            results = run_analysis_super_optimized(
                companies_file=args.file,
                load_all_companies=args.all_files,
                session_id=args.session_id,
                use_deep_analysis=args.deep_analysis,
                max_concurrent_companies=args.max_concurrent,
                selected_products=selected_products_list
            )
        elif args.optimized:
            log_info("üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –†–ï–ñ–ò–ú: –∫–æ–º–ø–∞–Ω–∏—è –∑–∞ –∫–æ–º–ø–∞–Ω–∏–µ–π —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é")
            results = run_analysis_optimized(
                companies_file=args.file,
                load_all_companies=args.all_files,
                session_id=args.session_id,
                use_deep_analysis=args.deep_analysis,
                selected_products=selected_products_list
            )
        elif args.parallel:
            log_info(f"üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: max_concurrent={args.max_concurrent}")
            log_info(f"üîó –ü–ï–†–ï–î–ê–ï–ú –í run_parallel_analysis: write_to_hubspot_criteria={args.write_to_hubspot_criteria}")
            results = run_parallel_analysis(
                companies_file=args.file,
                load_all_companies=args.all_files,
                session_id=args.session_id,
                use_deep_analysis=args.deep_analysis,
                max_concurrent_companies=args.max_concurrent,
                selected_products=selected_products_list,
                write_to_hubspot_criteria=args.write_to_hubspot_criteria
            )
        else:
            log_info("üêå –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
            results = run_analysis(
                companies_file=args.file,
                load_all_companies=args.all_files,
                session_id=args.session_id,
                use_deep_analysis=args.deep_analysis,
                selected_products=selected_products_list
            )
        
        log_info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(results)}")
        
    except KeyboardInterrupt:
        log_info("–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 