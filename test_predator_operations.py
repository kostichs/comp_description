#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å predator_id –≤ HubSpot

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª–µ gcore_predator_id
2. –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª—è
3. –£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª—è
4. –ü—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
import aiohttp

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

from src.integrations.hubspot.client import HubSpotClient
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PredatorTester:
    def __init__(self):
        load_dotenv()
        self.client = HubSpotClient()
        
        # –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏
        self.test_company_name = "Wargaming Group Limited"
        self.test_domain = "wargaming.com"
        self.test_predator_values = ["383", "999", "0", "1234"]
        
        if not self.client.api_key:
            raise ValueError("HUBSPOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            
    async def find_company_by_domain(self) -> dict:
        """–ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –¥–æ–º–µ–Ω—É"""
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ '{self.test_company_name}' –ø–æ –¥–æ–º–µ–Ω—É '{self.test_domain}'")
        
        company = await self.client.search_company_by_domain(self.test_domain)
        
        if company:
            company_id = company.get("id")
            properties = company.get("properties", {})
            current_predator = properties.get("gcore_predator_id")
            
            logger.info(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞!")
            logger.info(f"   ID: {company_id}")
            logger.info(f"   Name: {properties.get('name')}")
            logger.info(f"   Domain: {properties.get('domain')}")
            logger.info(f"   Current predator_id: {current_predator} (type: {type(current_predator)})")
            
            return company
        else:
            logger.error("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")
            return None
    
    async def read_predator_value(self, company_id: str) -> any:
        """–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ predator_id"""
        logger.info(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è predator_id –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")
        
        properties = await self.client.get_company_properties(
            company_id, 
            ["gcore_predator_id", "name", "domain"]
        )
        
        if properties:
            predator_value = properties.get("gcore_predator_id")
            logger.info(f"   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ predator_id: {predator_value}")
            logger.info(f"   –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è: {type(predator_value)}")
            logger.info(f"   –ó–Ω–∞—á–µ–Ω–∏–µ == None: {predator_value is None}")
            logger.info(f"   –ó–Ω–∞—á–µ–Ω–∏–µ == '': {predator_value == ''}")
            logger.info(f"   bool(–∑–Ω–∞—á–µ–Ω–∏–µ): {bool(predator_value)}")
            return predator_value
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏")
            return None
    
    async def write_predator_value(self, company_id: str, value: str) -> bool:
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ predator_id"""
        logger.info(f"‚úèÔ∏è –ó–∞–ø–∏—Å—å predator_id = '{value}' –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
            predator_numeric = int(value) if value else None
            
            properties = {
                "gcore_predator_id": predator_numeric
            }
            
            success = await self.client.update_company_properties(company_id, properties)
            
            if success:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ predator_id = {predator_numeric}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ predator_id = {value}")
                return False
                
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ '{value}' –≤ —á–∏—Å–ª–æ: {e}")
            return False
    
    async def clear_predator_value(self, company_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å/–æ—á–∏—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ predator_id"""
        logger.info(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ predator_id –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—á–∏—Å—Ç–∫–∏
        clear_methods = [
            ("–û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ None", {"gcore_predator_id": None}),
            ("–û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É", {"gcore_predator_id": ""}),
        ]
        
        for method_name, properties in clear_methods:
            logger.info(f"   –ü—Ä–æ–±—É–µ–º: {method_name}")
            
            success = await self.client.update_company_properties(company_id, properties)
            
            if success:
                logger.info(f"   ‚úÖ {method_name} - —É—Å–ø–µ—à–Ω–æ")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ HubSpot
                current_value = await self.read_predator_value(company_id)
                logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {current_value}")
                return True
            else:
                logger.error(f"   ‚ùå {method_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å")
        
        return False
    
    async def test_all_operations(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π —Å predator_id"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å predator_id")
        logger.info("=" * 60)
        
        # 1. –ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é
        company = await self.find_company_by_domain()
        if not company:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫–æ–º–ø–∞–Ω–∏–∏")
            return
        
        company_id = company.get("id")
        logger.info("=" * 60)
        
        # 2. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        logger.info("üìã –≠–¢–ê–ü 1: –ß—Ç–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
        initial_value = await self.read_predator_value(company_id)
        logger.info("=" * 60)
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        logger.info("üìã –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π")
        for test_value in self.test_predator_values:
            logger.info(f"--- –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ: '{test_value}' ---")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            write_success = await self.write_predator_value(company_id, test_value)
            
            if write_success:
                # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                read_value = await self.read_predator_value(company_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                expected_value = int(test_value)
                if read_value == expected_value:
                    logger.info(f"‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù: –∑–∞–ø–∏—Å–∞–Ω–æ {test_value}, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {read_value}")
                else:
                    logger.error(f"‚ùå –¢–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù: –∑–∞–ø–∏—Å–∞–Ω–æ {test_value}, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {read_value}")
            
            logger.info("")
        
        logger.info("=" * 60)
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
        logger.info("üìã –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è")
        clear_success = await self.clear_predator_value(company_id)
        
        if clear_success:
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –û—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        
        logger.info("=" * 60)
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        logger.info("üìã –≠–¢–ê–ü 4: –ê–Ω–∞–ª–∏–∑ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
        empty_value = await self.read_predator_value(company_id)
        logger.info(f"üîç –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥–∞—Ç–æ—Ä–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: {repr(empty_value)}")
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        checks = [
            ("is None", empty_value is None),
            ("== None", empty_value == None),
            ("== ''", empty_value == ''),
            ("== 0", empty_value == 0),
            ("bool(value)", bool(empty_value)),
            ("not value", not empty_value),
        ]
        
        logger.info("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:")
        for check_name, result in checks:
            logger.info(f"   {check_name}: {result}")
        
        logger.info("=" * 60)
        
        # 6. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª–æ)
        if initial_value is not None:
            logger.info(f"üìã –≠–¢–ê–ü 5: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {initial_value}")
            restore_success = await self.write_predator_value(company_id, str(initial_value))
            if restore_success:
                logger.info("‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = PredatorTester()
        await tester.test_all_operations()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == "__main__":
    asyncio.run(main()) 