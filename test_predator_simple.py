#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ predator –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

from src.integrations.hubspot.client import HubSpotClient
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç"""
    load_dotenv()
    client = HubSpotClient()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏
    domain = "wargaming.com"
    test_predator = "383"
    
    if not client.api_key:
        logger.error("HUBSPOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    logger.info(f"üîç –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –¥–æ–º–µ–Ω—É: {domain}")
    
    # 1. –ù–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é
    company = await client.search_company_by_domain(domain)
    if not company:
        logger.error("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    company_id = company.get("id")
    properties = company.get("properties", {})
    current_predator = properties.get("gcore_predator_id")
    
    logger.info(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {properties.get('name')}")
    logger.info(f"   ID: {company_id}")
    logger.info(f"   –¢–µ–∫—É—â–∏–π predator: {current_predator} (—Ç–∏–ø: {type(current_predator)})")
    
    # 2. –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    logger.info(f"\n‚úèÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º predator_id = {test_predator}")
    success = await client.update_company_properties(company_id, {
        "gcore_predator_id": int(test_predator)
    })
    
    if success:
        logger.info("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞")
        
        # 3. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
        await asyncio.sleep(1)
        properties = await client.get_company_properties(company_id, ["gcore_predator_id"])
        new_value = properties.get("gcore_predator_id") if properties else None
        
        logger.info(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value} (—Ç–∏–ø: {type(new_value)})")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if str(new_value) == test_predator:
            logger.info("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        else:
            logger.error(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏—è –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç! –û–∂–∏–¥–∞–ª–æ—Å—å: {test_predator}, –ø–æ–ª—É—á–µ–Ω–æ: {new_value}")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
    logger.info(f"\nüóëÔ∏è –û—á–∏—â–∞–µ–º predator_id")
    success = await client.update_company_properties(company_id, {
        "gcore_predator_id": ""  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É!
    })
    
    if success:
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
        
        await asyncio.sleep(1)
        properties = await client.get_company_properties(company_id, ["gcore_predator_id"])
        empty_value = properties.get("gcore_predator_id") if properties else None
        
        logger.info(f"üìñ –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {repr(empty_value)} (—Ç–∏–ø: {type(empty_value)})")
        logger.info(f"   is None: {empty_value is None}")
        logger.info(f"   bool(): {bool(empty_value)}")
        
        # 6. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if current_predator is not None:
            logger.info(f"\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_predator}")
            await client.update_company_properties(company_id, {
                "gcore_predator_id": current_predator
            })
            logger.info("‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")

if __name__ == "__main__":
    asyncio.run(quick_test()) 