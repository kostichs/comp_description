"""
HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HubSpotClient –∫–∞–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
"""

import json
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

import logging

def log_info(message):
    logging.info(message)

def log_error(message):
    logging.error(message)
from src.integrations.hubspot.client import HubSpotClient


def process_criteria_results_to_hubspot(results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ HubSpot
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ HubSpot
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–µ–∂–µ—Å—Ç—å –ø–æ ai_description_updated (–Ω–µ —Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤)
    3. –õ–∏–±–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ HubSpot, –ª–∏–±–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    4. –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ timestamp
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    return asyncio.run(_process_criteria_results_to_hubspot_async(results))

async def _process_criteria_results_to_hubspot_async(results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    log_info("üîó –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è HubSpot...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HubSpot –∫–ª–∏–µ–Ω—Ç–∞
        hubspot_client = HubSpotClient()
        
        if not hubspot_client.api_key:
            log_error("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞ HubSpot")
            return {
                "status": "skipped",
                "reason": "No HubSpot API key",
                "processed": 0,
                "errors": 0
            }

        stats = {
            "processed": 0,
            "updated": 0,
            "loaded_from_hubspot": 0,
            "errors": 0,
            "skipped": 0
        }
        
        for result in results:
            try:
                company_name = result.get("Company_Name", "")
                if not company_name:
                    log_error("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ Company_Name")
                    stats["skipped"] += 1
                    continue
                
                log_info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {company_name}")
                
                # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ HubSpot
                hubspot_company_id = result.get("HubSpot_Company_ID")
                if not hubspot_company_id:
                    log_info(f"‚ö†Ô∏è {company_name}: –Ω–µ—Ç HubSpot_Company_ID - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    stats["skipped"] += 1
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ HubSpot
                existing_data = await hubspot_client.get_company_properties(
                    hubspot_company_id, 
                    ["ai_criteria", "ai_description", "ai_description_updated"]
                )
                
                if not existing_data:
                    log_error(f"‚ùå {company_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ HubSpot")
                    stats["errors"] += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
                existing_criteria = existing_data.get("ai_criteria")
                existing_updated = existing_data.get("ai_description_updated")
                
                should_update = True
                
                if existing_criteria and existing_updated:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤)
                        updated_date = datetime.fromisoformat(existing_updated.replace('Z', '+00:00'))
                        six_months_ago = datetime.now().replace(tzinfo=updated_date.tzinfo) - timedelta(days=180)
                        
                        if updated_date > six_months_ago:
                            log_info(f"üìã {company_name}: –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–≤–µ–∂–∏–µ ({existing_updated}) - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ HubSpot")
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            try:
                                existing_criteria_data = json.loads(existing_criteria)
                                result["All_Results"] = existing_criteria_data
                                result["Qualified_Products"] = "LOADED FROM HUBSPOT"
                                
                                should_update = False
                                stats["loaded_from_hubspot"] += 1
                                
                            except json.JSONDecodeError:
                                log_error(f"‚ùå {company_name}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")
                                should_update = True
                        else:
                            log_info(f"‚è∞ {company_name}: –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ ({existing_updated}) - –æ–±–Ω–æ–≤–ª—è–µ–º")
                            
                    except Exception as e:
                        log_error(f"‚ùå {company_name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã: {e}")
                        should_update = True
                
                if should_update:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                    criteria_data = result.get("All_Results", {})
                    description = result.get("Description", "")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    update_data = {
                        "ai_criteria": json.dumps(criteria_data, ensure_ascii=False, separators=(',', ':')),
                        "ai_description": description,
                        "ai_description_updated": datetime.now().isoformat()
                    }
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ HubSpot
                    success = await hubspot_client.update_company_properties(
                        hubspot_company_id, 
                        update_data
                    )
                    
                    if success:
                        log_info(f"‚úÖ {company_name}: –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ HubSpot")
                        stats["updated"] += 1
                    else:
                        log_error(f"‚ùå {company_name}: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ HubSpot")
                        stats["errors"] += 1
                
                stats["processed"] += 1
                
            except Exception as e:
                log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ {result.get('Company_Name', 'Unknown')}: {e}")
                stats["errors"] += 1
        
        log_info(f"""
üéâ HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']}
   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}
   üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ HubSpot: {stats['loaded_from_hubspot']}
   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}
   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}""")
        
        return {
            "status": "completed",
            **stats
        }
        
    except Exception as e:
        log_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return {
            "status": "error",
            "error": str(e),
            "processed": 0,
            "errors": 1
        }


def check_hubspot_criteria_freshness(company_id: str, company_name: str) -> Optional[Dict[str, Any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ–∂–µ—Å—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    """
    return asyncio.run(_check_hubspot_criteria_freshness_async(company_id, company_name))

async def _check_hubspot_criteria_freshness_async(company_id: str, company_name: str) -> Optional[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–µ–∂–µ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤ HubSpot –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    
    Args:
        company_id: HubSpot ID –∫–æ–º–ø–∞–Ω–∏–∏
        company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        Dict —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å–≤–µ–∂–∏–µ, None –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HubSpot –∫–ª–∏–µ–Ω—Ç–∞
        hubspot_client = HubSpotClient()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HubSpot
        existing_data = await hubspot_client.get_company_properties(
            company_id, 
            ["ai_criteria", "ai_description_updated"]
        )
        
        if not existing_data:
            return None
        
        existing_criteria = existing_data.get("ai_criteria")
        existing_updated = existing_data.get("ai_description_updated")
        
        if not existing_criteria or not existing_updated:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
        try:
            updated_date = datetime.fromisoformat(existing_updated.replace('Z', '+00:00'))
            six_months_ago = datetime.now().replace(tzinfo=updated_date.tzinfo) - timedelta(days=180)
            
            if updated_date > six_months_ago:
                # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–≤–µ–∂–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                criteria_data = json.loads(existing_criteria)
                log_info(f"üìã {company_name}: –Ω–∞–π–¥–µ–Ω—ã —Å–≤–µ–∂–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ HubSpot ({existing_updated})")
                return criteria_data
            else:
                log_info(f"‚è∞ {company_name}: –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ HubSpot —É—Å—Ç–∞—Ä–µ–ª–∏ ({existing_updated})")
                return None
                
        except Exception as e:
            log_error(f"‚ùå {company_name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
            return None
        
    except Exception as e:
        log_error(f"‚ùå {company_name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤ HubSpot: {e}")
        return None 