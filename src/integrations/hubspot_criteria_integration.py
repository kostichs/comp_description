"""
HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HubSpotClient –∫–∞–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
"""

import json
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

import logging

def log_info(message):
    logging.info(message)

def log_error(message):
    logging.error(message)
from src.integrations.hubspot.client import HubSpotClient


def process_criteria_results_to_hubspot(results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ HubSpot
    
    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —á–µ–∫–±–æ–∫—Å–µ
    2. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ timestamp
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    return asyncio.run(_process_criteria_results_to_hubspot_async(results))

async def _process_criteria_results_to_hubspot_async(results: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    log_info("üîó –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è HubSpot...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HubSpot –∫–ª–∏–µ–Ω—Ç–∞
        hubspot_client = HubSpotClient()
        
        if not hubspot_client.api_key:
            log_error("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞ HubSpot")
            return {
                "status": "skipped",
                "reason": "No HubSpot API key",
                "processed": 0,
                "errors": 0
            }

        stats = {
            "processed": 0,
            "updated": 0,
            "errors": 0,
            "skipped": 0
        }
        
        for result in results:
            try:
                company_name = result.get("Company_Name", "")
                if not company_name:
                    log_error("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ Company_Name")
                    stats["skipped"] += 1
                    continue
                
                log_info(f"üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {company_name}")
                
                # –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ HubSpot
                hubspot_company_id = result.get("HubSpot_Company_ID")
                if not hubspot_company_id:
                    log_info(f"‚ö†Ô∏è {company_name}: –Ω–µ—Ç HubSpot_Company_ID - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    stats["skipped"] += 1
                    continue
                
                # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —á–µ–∫–±–æ–∫—Å–µ HubSpot
                log_info(f"üîÑ {company_name}: –æ–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ HubSpot")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
                criteria_data = result.get("All_Results", {})
                description = result.get("Description", "")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {
                    "ai_criteria": json.dumps(criteria_data, ensure_ascii=False, separators=(',', ':')),
                    "ai_description": description,
                    "ai_description_updated": datetime.now().isoformat()
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ HubSpot
                success = await hubspot_client.update_company_properties(
                    hubspot_company_id, 
                    update_data
                )
                
                if success:
                    log_info(f"‚úÖ {company_name}: –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ HubSpot")
                    stats["updated"] += 1
                else:
                    log_error(f"‚ùå {company_name}: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ HubSpot")
                    stats["errors"] += 1
                
                stats["processed"] += 1
                
            except Exception as e:
                log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ {result.get('Company_Name', 'Unknown')}: {e}")
                stats["errors"] += 1
        
        log_info(f"""
üéâ HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']}
   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}
   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}
   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}""")
        
        return {
            "status": "completed",
            **stats
        }
        
    except Exception as e:
        log_error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ HubSpot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return {
            "status": "error",
            "error": str(e),
            "processed": 0,
            "errors": 1
        }


def check_hubspot_criteria_freshness(company_id: str, company_name: str) -> Optional[Dict[str, Any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ–∂–µ—Å—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    –£–°–¢–ê–†–ï–õ–ê - —Ç–µ–ø–µ—Ä—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è
    """
    return None

async def _check_hubspot_criteria_freshness_async(company_id: str, company_name: str) -> Optional[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–µ–∂–µ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤ HubSpot –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    –£–°–¢–ê–†–ï–õ–ê - —Ç–µ–ø–µ—Ä—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è
    """
    return None 