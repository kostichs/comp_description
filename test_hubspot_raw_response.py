#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAW –æ—Ç–≤–µ—Ç–∞ HubSpot API
"""

import os
import sys
import asyncio
import logging
import json
from pathlib import Path
import aiohttp

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

async def test_raw_hubspot_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º RAW –æ—Ç–≤–µ—Ç –æ—Ç HubSpot API"""
    load_dotenv()
    api_key = os.getenv("HUBSPOT_API_KEY")
    
    if not api_key:
        logger.error("HUBSPOT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    domain = "wargaming.com"
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    # 1. –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏
    logger.info(f"üîç –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –¥–æ–º–µ–Ω—É: {domain}")
    
    search_url = "https://api.hubapi.com/crm/v3/objects/companies/search"
    search_payload = {
        "filterGroups": [{
            "filters": [{
                "propertyName": "domain",
                "operator": "EQ",
                "value": domain
            }]
        }],
        "properties": ["name", "domain", "gcore_predator_id"],
        "limit": 1
    }
    
    async with aiohttp.ClientSession() as session:
        # –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏
        async with session.post(search_url, headers=headers, json=search_payload) as response:
            if response.status == 200:
                search_data = await response.json()
                logger.info(f"üìã RAW SEARCH RESPONSE:")
                logger.info(json.dumps(search_data, indent=2, ensure_ascii=False))
                
                results = search_data.get("results", [])
                if not results:
                    logger.error("‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                company = results[0]
                company_id = company.get("id")
                properties = company.get("properties", {})
                predator_value = properties.get("gcore_predator_id")
                
                logger.info(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û–õ–Ø gcore_predator_id:")
                logger.info(f"   RAW –∑–Ω–∞—á–µ–Ω–∏–µ: {repr(predator_value)}")
                logger.info(f"   –¢–∏–ø: {type(predator_value)}")
                logger.info(f"   is None: {predator_value is None}")
                logger.info(f"   == '': {predator_value == ''}")
                logger.info(f"   bool(): {bool(predator_value)}")
                
                # 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                logger.info(f"\n‚úèÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º predator_id = 999")
                
                update_url = f"https://api.hubapi.com/crm/v3/objects/companies/{company_id}"
                update_payload = {
                    "properties": {
                        "gcore_predator_id": 999  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ
                    }
                }
                
                async with session.patch(update_url, headers=headers, json=update_payload) as update_response:
                    if update_response.status == 200:
                        logger.info("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞")
                        
                        # 3. –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                        await asyncio.sleep(1)
                        
                        get_url = f"https://api.hubapi.com/crm/v3/objects/companies/{company_id}?properties=gcore_predator_id,name"
                        
                        async with session.get(get_url, headers=headers) as get_response:
                            if get_response.status == 200:
                                get_data = await get_response.json()
                                logger.info(f"\nüìã RAW GET RESPONSE:")
                                logger.info(json.dumps(get_data, indent=2, ensure_ascii=False))
                                
                                get_properties = get_data.get("properties", {})
                                new_predator = get_properties.get("gcore_predator_id")
                                
                                logger.info(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï –ó–ê–ü–ò–°–ò:")
                                logger.info(f"   RAW –∑–Ω–∞—á–µ–Ω–∏–µ: {repr(new_predator)}")
                                logger.info(f"   –¢–∏–ø: {type(new_predator)}")
                                logger.info(f"   –ó–∞–ø–∏—Å–∞–ª–∏: 999 (int)")
                                logger.info(f"   –ü–æ–ª—É—á–∏–ª–∏: {new_predator} ({type(new_predator)})")
                            else:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {get_response.status}")
                    else:
                        error_text = await update_response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {update_response.status} - {error_text}")
            else:
                error_text = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status} - {error_text}")

if __name__ == "__main__":
    asyncio.run(test_raw_hubspot_response()) 