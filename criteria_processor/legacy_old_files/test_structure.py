#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ API –≤—ã–∑–æ–≤–æ–≤
"""

import os
import sys
import pandas as pd
import glob

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from config import CRITERIA_TYPE, PROCESSING_CONFIG, CRITERIA_DIR
        print("‚úÖ config.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config.py: {e}")
        return False
    
    try:
        from sanctions_checker import check_sanctions, apply_sanctions_filter
        print("‚úÖ sanctions_checker.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ sanctions_checker.py: {e}")
        return False
    
    try:
        from scoring_system import calculate_nth_score, generate_scoring_summary
        print("‚úÖ scoring_system.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ scoring_system.py: {e}")
        return False
    
    try:
        from json_formatter import create_structured_output, format_for_csv_output
        print("‚úÖ json_formatter.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ json_formatter.py: {e}")
        return False
    
    try:
        from data_utils import load_companies_data, load_all_criteria_files
        print("‚úÖ data_utils.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ data_utils.py: {e}")
        return False
    
    return True

def test_sanctions_checker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    
    from sanctions_checker import check_sanctions
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        ("Test Company", "A technology company based in California", "https://example.com", False),
        ("RU Tech", "Russian technology company in Moscow", "https://example.ru", True),
        ("China Corp", "Chinese development company", "https://example.cn", True),
        ("Iran Systems", "Software company in Tehran", "", True),
        ("Normal Corp", "Regular tech company", "", False),
    ]
    
    for name, desc, website, should_be_sanctioned in test_cases:
        is_sanctioned, reason = check_sanctions(name, desc, website)
        
        if is_sanctioned == should_be_sanctioned:
            print(f"‚úÖ {name}: {reason}")
        else:
            print(f"‚ùå {name}: –û–∂–∏–¥–∞–ª–æ—Å—å {should_be_sanctioned}, –ø–æ–ª—É—á–µ–Ω–æ {is_sanctioned}")

def test_scoring_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–∫–æ—Ä–∏–Ω–≥–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∫–æ—Ä–∏–Ω–≥–∞...")
    
    from scoring_system import calculate_nth_score, generate_scoring_summary
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_results = {
        "Qualification_Gaming": "Yes",
        "NTH_Gaming_Criterion1": "Passed",
        "NTH_Gaming_Criterion2": "ND", 
        "NTH_Gaming_Criterion3": "Not Passed",
        "Mandatory_Gaming_Criterion1": "Passed",
        "Mandatory_Gaming_Criterion2": "Passed"
    }
    
    score, details = calculate_nth_score(test_results, "Gaming")
    print(f"‚úÖ NTH Score –¥–ª—è Gaming: {score:.2f}")
    print(f"   –î–µ—Ç–∞–ª–∏: {details}")
    
    summary = generate_scoring_summary(test_results)
    print(f"‚úÖ –û–±—â–∞—è —Å–≤–æ–¥–∫–∞: {summary['overall_status']}")

def test_file_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    from config import INPUT_PATH
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–º–ø–∞–Ω–∏–π
    if os.path.exists(INPUT_PATH):
        print(f"‚úÖ –§–∞–π–ª –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω: {INPUT_PATH}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        try:
            df = pd.read_csv(INPUT_PATH, nrows=5)
            print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
            print(f"   –ó–∞–ø–∏—Å–µ–π (–ø—Ä–∏–º–µ—Ä–Ω–æ): {len(df)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
    else:
        print(f"‚ùå –§–∞–π–ª –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {INPUT_PATH}")

def test_criteria_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤:")
    from config import CRITERIA_DIR
    
    if os.path.exists(CRITERIA_DIR):
        criteria_files = glob.glob(os.path.join(CRITERIA_DIR, "*.csv"))
        print(f"‚úÖ –ü–∞–ø–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–∞–π–¥–µ–Ω–∞: {CRITERIA_DIR}")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {len(criteria_files)}")
        for file_path in criteria_files:
            filename = os.path.basename(file_path)
            print(f"   - {filename}")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        try:
            from data_utils import load_all_criteria_files
            df = load_all_criteria_files()
            print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            print(f"   –ü—Ä–æ–¥—É–∫—Ç—ã: {', '.join(df['Product'].unique())}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
    else:
        print(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {CRITERIA_DIR}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã\n")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    if not test_imports():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥.")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    test_sanctions_checker()
    test_scoring_system()
    test_file_structure()
    test_criteria_files()
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìã –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª (—Å–º. ENV_SETUP.md)")
    
    return True

if __name__ == "__main__":
    main() 